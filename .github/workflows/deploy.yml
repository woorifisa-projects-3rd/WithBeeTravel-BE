name: Build and Deploy to AWS EC2 using Docker

on:
  push:
    branches:
      - dev_cd
  pull_request:
    branches:
      - dev_cd

jobs:
  # 빌드 및 테스트 (Gradle 빌드와 테스트)
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      # GitHub Secrets에서 환경 변수 설정
      - name: Build with Gradle Wrapper
        run: ./gradlew build
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver

      # Gradle 빌드 후 build/libs 디렉토리 확인
      - name: List build/libs contents
        run: ls -l build/libs  # 빌드 후 JAR 파일이 제대로 생성되었는지 확인

      - name: Run tests
        run: ./gradlew test
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver

  # Docker 이미지 빌드 및 푸시
  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build  # build job이 성공적으로 끝난 후 실행됨

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 빌드를 통해 생성된 JAR 파일 확인
      - name: Check if JAR file exists
        run: |
          echo "Checking if JAR file exists..."
          ls -l build/libs
          if [ ! -f build/libs/*.jar ]; then
            echo "JAR file not found!";
            exit 1;
          fi

      # application.properties 파일 생성
      - name: Create application.properties
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties

      # Docker 이미지 빌드
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/with-bee:latest

      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/with-bee:latest

  # EC2에 Docker 배포
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push-docker  # Docker 빌드와 푸시가 성공해야 실행됨

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_SSH_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # EC2에서 기존 컨테이너가 있을 경우 제거
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-8080")
            
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            
            # Docker Hub에서 새 이미지 pull
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/with-bee:latest
            
            # 새로운 컨테이너로 실행
            sudo docker run --name with-bee -d -p 80:8080 -e TZ=Asia/Seoul ${{ secrets.DOCKER_USERNAME }}/with-bee:latest
