name: Build and Deploy to Local Ubuntu using Docker

on:
  push:
    branches:
      - dev

env:
  DOCKER_IMAGE_NAME: with-bee-dev
  LOCAL_UBUNTU_HOST: ${{ secrets.LOCAL_UBUNTU_HOST }}
  LOCAL_UBUNTU_SSH_USER: ubuntu
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_HUB: ${{ secrets.DOCKER_USERNAME }}/withbee-dev
  SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Grant execute permissions to gradlew
        run: chmod +x ./gradlew

      - name: Create necessary directories
        run: |
          mkdir -p ./src/main/resources
      - name: Create application.properties
        run: |
          echo "${{ secrets.APPLICATION_DEV }}" > ./src/main/resources/application.properties
      - name: Create aws.properties
        run: |
          echo "${{ secrets.AWS_PROPERTIES }}" > ./src/main/resources/aws.properties

      - name: Build with Gradle Wrapper (without tests)
        run: ./gradlew build -x test

      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest

      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest

  deploy-to-ubuntu:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
      - name: Deploy to Local Ubuntu
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LOCAL_UBUNTU_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Docker 로그인
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # 8080 포트를 사용하는 현재 실행 중인 컨테이너 찾기
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            
            # 모든 종료된(exited) 컨테이너 삭제
            sudo docker container prune -f
            
            # 최신 이미지 풀링
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest"
            
            # 새로운 컨테이너 실행
            sudo docker run --name with-bee-dev -d -p 8080:8080 -e TZ=Asia/Seoul "${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest"