name: Build and Deploy to Local Ubuntu using Docker

on:
  push:
    branches:
      - feat/TK-224-관리자-페이지-API-구현

env:
  DOCKER_IMAGE_NAME: with-bee-dev  # Docker 이미지 이름
  LOCAL_UBUNTU_HOST: ${{ secrets.LOCAL_UBUNTU_HOST }}
  LOCAL_UBUNTU_SSH_USER: ubuntu  # 사용자 이름
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username
  DOCKER_HUB: ${{ secrets.DOCKER_USERNAME }}/withbee-dev  # Docker Hub 이미지 이름
  SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver

jobs:
  # 1단계: 빌드
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      # 필요한 디렉토리 생성
      - name: Create necessary directories
        run: |
          mkdir -p ./src/main/resources

      # application.properties 파일 생성
      - name: Create application.properties
        run: |
          echo "${{ secrets.APPLICATION_DEV }}" > ./src/main/resources/application.properties

      # aws.properties 파일 생성
      - name: Create aws.properties
        run: |
          echo "${{ secrets.AWS_PROPERTIES }}" | tr ';' '\n' > ./src/main/resources/aws.properties

      # Gradle 빌드 (JAR 파일 생성), 테스트 생략
      - name: Build with Gradle Wrapper (without tests)
        run: ./gradlew build -x test

      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest

      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest

  #2단계
  deploy-to-ubuntu:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Execute commands on EC2 using SSM
        run: |
          INSTANCE_ID="${{ secrets.INSTANCE_ID }}"

          # EC2에 연결하고 명령 실행
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Docker container" \
            --parameters 'commands=["sudo docker ps -q --filter \"publish=8080:8080\" | xargs -r sudo docker stop && sudo docker rm $(sudo docker ps -q --filter \"publish=8080:8080\")","sudo docker pull ${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest","sudo docker run --name with-bee-dev -d -p 8080:8080 -e TZ=Asia/Seoul ${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest"]'


#  # 2단계: 로컬 Ubuntu에 Docker 배포
#  deploy-to-ubuntu:
#    runs-on: ubuntu-latest
#    needs: build-and-push-docker
#    steps:
#      - name: Deploy to Local Ubuntu
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.LOCAL_UBUNTU_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#          script: |
#            #  기존 컨테이너가 있을 경우 제거
#            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
#
#            if [ ! -z "$CONTAINER_ID" ]; then
#              sudo docker stop $CONTAINER_ID
#              sudo docker rm $CONTAINER_ID
#            fi
#
#            # Docker Hub에서 새 이미지 pull
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest
#
#            # 새로운 컨테이너로 실행
#            sudo docker run --name with-bee-dev -d -p 8080:8080 -e TZ=Asia/Seoul ${{ secrets.DOCKER_USERNAME }}/withbee-dev:latest
